"INEURON_SQL_PROJECT"."PUBLIC"."SHOPPING_HISTORY""INEURON_SQL_PROJECT"."PUBLIC"CREATE DATABASE iNeuron_SQL_Project


USE iNeuron_SQL_Project

#########################################################--TASK 1--##############################################################################################


CREATE OR REPLACE TABLE SHOPPING_HISTORY (
  PRODUCT VARCHAR NOT NULL,
  QUANTITY INTEGER NOT NULL,
  UNIT_PRICE INTEGER NOT NULL
);


INSERT INTO SHOPPING_HISTORY VALUES
('T SHIRT',48,65);
INSERT INTO SHOPPING_HISTORY VALUES
('SHIRT',24,95),
('JEANS',12,455),
('T SHIRT',9,75),
('JACKET',3,550),
('UNDERWEAR',24,255);
 
SELECT * FROM SHOPPING_HISTORY;

INSERT INTO SHOPPING_HISTORY VALUES
('JEANS',24,580),
('JACKET',12,265),
('JEANS',36,780);



SELECT product,quantity,UNIT_PRICE, SUM(QUANTITY * UNIT_PRICE) as total_price FROM "INEURON_SQL_PROJECT"."PUBLIC"."SHOPPING_HISTORY" 
group by 1,2,3
ORDER BY 1,2 desc;


SELECT SUM(UNIT_PRICE) FROM  SHOPPING_HISTORY WHERE PRODUCT = 'SHIRT';

######################################################                   task 2                    #############################################################

USE iNeuron_SQL_Project

given --1--

CREATE  OR REPLACE TABLE PHONES (
    NAME VARCHAR(20) NOT NULL,
    PHONE_NUMBER INTEGER NOT NULL UNIQUE
);

INSERT INTO PHONES(NAME,PHONE_NUMBER) VALUES 
('Jack',1234),
('Lena',3333),
('Mark',9999),
('Anna',7582);

SELECT * FROM PHONES

CREATE OR REPLACE TABLE CALLS (
    ID INTEGER NOT NULL UNIQUE,
    CALLER INTEGER NOT NULL,
    CALLEE INTEGER NOT NULL,
    DURATION INTEGER NOT NULL
)

INSERT INTO CALLS (ID,CALLER,CALLEE,DURATION) VALUES
(25,1234,7582,8),
(7,9999,7582,1),
(18,9999,3333,4),
(2,7582,3333,3),
(3,3333,1234,1),
(21,3333,1234,1);

SELECT * FROM CALLS

with
cte as (
		select caller, sum(duration) as dur from calls group by 1
        union all 
        select callee, sum(duration) from calls group by 1
)
select phones.name as Name
from cte
	inner join phones on phones.phone_number = cte.caller
group by 1
having sum(cte.dur) >= 10;


given --2----




